// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= modifiers classDeclaration

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT}

classDeclaration ::= CLASS IDENTIFIER 
                       [EXTENDS qualifiedIdentifier] 
                       classBody

classBody ::= LCURLY {modifiers memberDecl} RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters (block | SEMI)
             | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | WHILE parExpression statement 
            | FOR forExpression statement
            | SWITCH switchBlock
            | TRY statement {catchStatement} (FINALLY statement | catchStatement)
            | THROW expression SEMI
            | DO statement UNTIL parExpression SEMI
            | RETURN [expression] SEMI
            | SEMI 
            | statementExpression SEMI

forExpression ::= RPAREN (simpleForExpression | enhancedForExpression) LPAREN

simpleForExpression ::=     (statementExpression SEMI| localVariableDeclerator)
                            expression SEMI
                            statementExpression SEMI
                        
enhancedForExpression ::= formalParamater COLON expression
            
switchBlock ::= RPAREN
                    {CASE COLON {blockStatement}}
                    [DEFAULT COLON {blockStatement}]
                LCURLY
                
catchStatement ::= CATCH parExpression block
            
formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN
                        [THROWS qualifiedIdentifier {COMMA qualifiedIdentifier}]

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer {COMMA variableInitializer}]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | LONG | DOUBLE | FLOAT

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentExpression ::= conditionalExpression  // must be a valid lhs
                           [(ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | BSHL_ASSIGN | BSHR_ASSIGN | BSHRU_ASSIGN | BWAND_ASSIGN | BWOR_ASSIGN | BWXOR_ASSIGN) assignmentExpression]

conditionalExpression ::= conditionalOrExpression // level 12
                              {QMARK conditionalOrExpression
                              COLON conditionalOrExpression}

conditionalOrExpression ::= conditionalAndExpression // level 11
                              {LOR conditionalAndExpression}
                          
conditionalAndExpression ::= bitwiseOrExpression // level 10
                               {LAND bitwiseOrExpression}
                               
bitwiseOrExpression ::= bitwiseXOrExpression // level 9
                            {BWOR bitwiseXOrExpression}

bitwiseXOrExpression ::= bitwiseAndExpression // level 8
                            {BWXOR bitwiseAndExpression}

bitwiseAndExpression ::= equalityExpression // level 7
                            {BWAND equalityExpression}
                            
equalityExpression ::= relationalExpression  // level 6
                         {(EQUAL | NOT_EQUAL) relationalExpression}

relationalExpression ::= shiftExpression       // level 5
                           [(GT | GTEQ | LE | LT) shiftExpression
                           | INSTANCEOF referenceType]

shiftExpression ::= additiveExpression // level 4
                        {(BSHR | BSHL | BSHRU) additiveExpression}
                           
additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                               {(STAR | DIV | MOD) unaryExpression}

unaryExpression ::= INC unaryExpression  // level 1
                  | MINUS unaryExpression
                  | BWNOT unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted               
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary {selector} {DEC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL | LONG_LITERAL
          | TRUE        | FALSE        | NULL           | DOUBLE_LITERAL
          | FLOAT_LITERAL
